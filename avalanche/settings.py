"""
Django settings for avalanche project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import environ
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def get_env_variable(var_name):
    try:
        return os.environ[var_name]
    except KeyError:
        error_message = "set the %s environment variable" % var_name
        raise ImproperlyConfigured(error_message)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/



ALLOWED_HOSTS = [
    '*'
]

TRAVIS = get_env_variable('TRAVIS')
#apps that all tenants can access
SHARED_APPS = (
        'tenant_schemas',
        'tenants',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'public_site',
        'general_management',
        'invitation_manager'
    )
#apps that must be unique to tenants
TENANT_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'tenant_site'
    )
#tenant model

TENANT_MODEL = 'tenants.Tenant'
TEST_RUNNER = 'django.test.runner.DiscoverRunner'


# Application definition

INSTALLED_APPS = [
    'tenant_schemas',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tenants',
    'public_site',
    'general_management',
    'invitation_manager',
    'tenant_site'
    
]

MIDDLEWARE = [
    'tenant_schemas.middleware.TenantMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'avalanche.urls'

#public tenant routes
PUBLIC_SCHEMA_URLCONF = 'avalanche.public_urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'avalanche.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
if 'TRAVIS' in os.environ:
    SECRET_KEY = get_env_variable('SECRET_KEY')
    DEBUG = get_env_variable('DEBUG')
    LOGIN_URL=get_env_variable('LOGIN_URL')
    DATABASES = {
        'default': {
            'ENGINE':'tenant_schemas.postgresql_backend',
            'NAME':'travisci',
            'USER':'postgres',
            'PASSWORD':'',
            'HOST':'localhost',
            'PORT':''
        }
    }
else:
    env = environ.Env(DEBUG=(bool, False),) # set default values and casting
    environ.Env.read_env(os.path.join(BASE_DIR,".env"))
    DATABASES = {
        'default': {
            'ENGINE':'tenant_schemas.postgresql_backend',
            'NAME':env('DB_NAME'),
            'USER':env('DB_USER'),
            'PASSWORD':env('DB_PASSWORD'),
            'HOST':env('DB_HOST'),
            'PORT':env('DB_PORT')
        }
    }

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = env('SECRET_KEY')

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = env('DEBUG')

    LOGIN_URL = env('LOGIN_URL')
    


DATABASE_ROUTERS = (
    'tenant_schemas.routers.TenantSyncRouter',
)


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#Authentication Backend

AUTHENTICATION_BACKENDS = (
    'avalanche.custom_backends.CustomEmailAuthBackend',

    )
#Login Url

LOGIN_URL = env('LOGIN_URL')



# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR,"static")
